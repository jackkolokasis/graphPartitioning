/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// scalastyle:off

package org.apache.spark.examples.graphx

import com.google.common.collect.Sets
import org.apache.spark._
import org.apache.spark.graphx._
import org.apache.spark.graphx.impl.EdgePartition
import org.apache.spark.rdd.RDD
import scala.collection.JavaConversions
import scala.language.existentials
import scala.collection.mutable.ListBuffer
import scala.collection.mutable.HashSet
import scala.collection.mutable.HashMap


class SuperVertexRDD() {
  private var superVertex = new HashMap[VertexId, List[VertexId]]()
  private var key = 0

  def addSuperVertex(srcId: VertexId, dstid: VertexId): ={
    if !(VertexHashMap.exist(_._2.contains(srcId)) || VertexHashMap.exist(_._2.contains(dstId))) {
      superVertex += key -> List(srcId, dstId)
    }
  }

  def getSuperVertex: _superVertex

  //may to introduce a function in order to 

}



//scalastyle:off
